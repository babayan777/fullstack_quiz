{"ast":null,"code":"var _jsxFileName = \"/Users/gagikbabayan/Desktop/backend/client/src/components/Question.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from 'react';\nimport './Question.css';\nimport Progress from './Progress';\nimport Loading from './Loading';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Question = ({\n  data,\n  onAnswerUpdate,\n  numberOfQuestion,\n  activeQuestion,\n  onSetActiveQuestion,\n  onSetStep\n}) => {\n  _s();\n\n  const [selected, setSelected] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [completed, setCompleted] = useState(0);\n  const radiosWrapper = useRef();\n  const [loading, setLoading] = useState(false);\n\n  const changeHandler = e => {\n    setSelected(e.target.value);\n\n    if (error) {\n      setError(\"\");\n    }\n  };\n\n  const nextClickHandler = e => {\n    if (selected === \"\") {\n      return setError(\"Please select one option\");\n    } //loading\n\n\n    if (!loading) {\n      setLoading(true);\n      setTimeout(() => {\n        setLoading(false);\n      }, 1000);\n    }\n\n    onAnswerUpdate(prevState => [...prevState, {\n      q: data.question,\n      a: selected\n    }]); // clearInterval();\n\n    setSelected(\"\");\n\n    if (activeQuestion < numberOfQuestion - 1) {\n      onSetActiveQuestion(activeQuestion + 1);\n    } else {\n      onSetStep(3);\n    }\n\n    setCompleted(Math.floor(completed + 20));\n  };\n\n  useEffect(() => {\n    if (loading === true) {\n      console.log(\"Loading\");\n    } else {\n      const findCheckedInput = radiosWrapper.current.querySelector('input:checked');\n\n      if (findCheckedInput) {\n        findCheckedInput.checked = false;\n      }\n    }\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: loading ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question\",\n      children: [console.log(\"question\"), /*#__PURE__*/_jsxDEV(Progress, {\n        bgcolor: \"#776DA2\",\n        completed: completed\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-container container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-title\",\n          children: data.question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"main\",\n          ref: radiosWrapper,\n          children: data.choices.map((item, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"answer-container\",\n            children: /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"radio has-background-light\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"radio\",\n                name: \"answer\",\n                value: item,\n                onChange: changeHandler\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 70,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: item\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 71,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 33\n            }, this)\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error-container\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 31\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"question-btn\",\n          onClick: nextClickHandler,\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 21\n    }, this)\n  }, void 0, false);\n};\n\n_s(Question, \"GOxvm5V5OrUzlDzq76eoMlD5V2M=\");\n\n_c = Question;\nexport default Question;\n\nvar _c;\n\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"sources":["/Users/gagikbabayan/Desktop/backend/client/src/components/Question.js"],"names":["React","useRef","useState","useEffect","Progress","Loading","Question","data","onAnswerUpdate","numberOfQuestion","activeQuestion","onSetActiveQuestion","onSetStep","selected","setSelected","error","setError","completed","setCompleted","radiosWrapper","loading","setLoading","changeHandler","e","target","value","nextClickHandler","setTimeout","prevState","q","question","a","Math","floor","console","log","findCheckedInput","current","querySelector","checked","choices","map","item","i"],"mappings":"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","sourcesContent":["import React, { useRef, useState ,useEffect } from 'react'\nimport './Question.css'\nimport Progress from './Progress';\nimport Loading from './Loading'\n  \nconst Question = ({ data, onAnswerUpdate, numberOfQuestion, activeQuestion, onSetActiveQuestion, onSetStep}) => {\n    const [selected,setSelected] = useState(\"\");\n    const [error,setError] = useState(\"\");\n    const [completed, setCompleted] = useState(0);\n    const radiosWrapper = useRef();\n    const [loading,setLoading] = useState(false);\n\n\n\n    const changeHandler = (e) => {\n        setSelected(e.target.value);\n        if(error){\n            setError(\"\");\n        }\n    }\n\n    const nextClickHandler = (e) => {\n        if(selected === \"\"){\n            return setError(\"Please select one option\");\n        }\n        //loading\n        if(!loading){\n                setLoading(true);\n                setTimeout(() => {\n                    setLoading(false)\n                },1000)\n        }\n\n        onAnswerUpdate(prevState => [...prevState,{q: data.question, a:selected}]);\n        // clearInterval();\n        setSelected(\"\");\n        if(activeQuestion < numberOfQuestion - 1){\n            onSetActiveQuestion(activeQuestion + 1);\n        }\n        else{\n            onSetStep(3);\n        }\n        setCompleted(Math.floor(completed + 20));\n    }\n\n            useEffect(() => {\n                if(loading === true){\n                    console.log(\"Loading\")\n                }\n                else{\n                    const findCheckedInput = radiosWrapper.current.querySelector('input:checked');\n                    if(findCheckedInput) {\n                    findCheckedInput.checked = false;\n                    }\n                }\n\n        }, [data]);\n    return (\n       <>\n        { loading ? <Loading/> : \n                    <div className=\"question\">\n                        {console.log(\"question\")}\n                    <Progress bgcolor={\"#776DA2\"} completed={completed} />\n                <div className=\"question-container container\">\n                    <div className=\"question-title\">{data.question}</div>\n                    <div className=\"main\" ref={radiosWrapper}>\n                        {data.choices.map((item,i) => (\n                            <div className=\"answer-container\" key={i}>\n                                <label className=\"radio has-background-light\" >\n                                    <input type=\"radio\" name=\"answer\" value={item} onChange={changeHandler} />\n                                    <span>{item}</span>\n                                </label>\n                            </div>\n                    ))}\n                    </div>\n                    {error && <div className=\"error-container\">{error}</div>}\n                    <button className=\"question-btn\" onClick={nextClickHandler}>Next</button>\n                </div>\n            </div>\n        }\n        </>\n    )\n}\n\nexport default Question\n"]},"metadata":{},"sourceType":"module"}